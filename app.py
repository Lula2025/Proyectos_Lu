import streamlit as st
import pandas as pd
import plotly.express as px

# Configuraci√≥n de la p√°gina de Streamlit
st.set_page_config(page_title="L√≠nea de Tiempo de Actividades", layout="wide")

# T√≠tulo de la aplicaci√≥n con un emoji de calendario
st.title("üìÖ L√≠nea de Tiempo de Actividades por Cultivo")

# Cargar el archivo CSV directamente sin necesidad de cargarlo manualmente
df = pd.read_csv("6_2023_2024_a_marzo_2025.csv")

# Asegurar formato datetime para las fechas
df['Fecha_en_que_se_realiz√≥_la_actividad'] = pd.to_datetime(df['Fecha_en_que_se_realiz√≥_la_actividad'], errors='coerce')

# Selecci√≥n del ID de cultivo con un selectbox
id_cultivo_seleccionado = st.selectbox("Selecciona un ID de Cultivo", df['ID_Cultivo'].dropna().unique())

# Filtrar los datos por el ID de cultivo seleccionado
df_filtrado = df[df['ID_Cultivo'] == id_cultivo_seleccionado].copy()

# Ordenar las actividades cronol√≥gicamente y luego invertirlas para que las m√°s antiguas est√©n abajo
orden_actividades = df_filtrado.sort_values("Fecha_en_que_se_realiz√≥_la_actividad")["Actividad_realizada"].unique()[::-1]

# Diccionario de emojis seg√∫n la actividad
emoji_actividades = {
    "Fertilizaci√≥n": "üíº",  # Costalito de fertilizante
    "Siembra": "üå±",  # Plantita para la siembra
    "Barbecho": "üßë‚Äçüåæ",  # Agricultor trabajando el suelo
    "Trilla": "üåæ",  # Espiga de trigo
    # Puedes agregar m√°s actividades e iconos seg√∫n necesites
}

# Asignar emojis a las actividades
df_filtrado["Icono_actividad"] = df_filtrado["Actividad_realizada"].map(emoji_actividades).fillna("üîÑ")  # Emoji por defecto

# Crear gr√°fico de dispersi√≥n
fig = px.scatter(
    df_filtrado,
    x="Fecha_en_que_se_realiz√≥_la_actividad",
    y="Actividad_realizada",
    category_orders={"Actividad_realizada": orden_actividades},
    title=f"üïí Actividades realizadas en el cultivo {id_cultivo_seleccionado}",
    labels={"Fecha_en_que_se_realiz√≥_la_actividad": "Fecha"},
    color_discrete_sequence=["#FF6347"],  # Color m√°s vibrante
    hover_data={
        "Actividad_realizada": False,  # No mostrar actividad al pasar el rat√≥n
        "Fecha_en_que_se_realiz√≥_la_actividad": True
    },
)

# Agregar iconos de emojis como texto en las etiquetas
df_filtrado["Etiqueta"] = df_filtrado["Icono_actividad"] + " " + df_filtrado["Fecha_en_que_se_realiz√≥_la_actividad"].dt.strftime("%d %b %Y")
fig.update_traces(
    text=df_filtrado["Etiqueta"],  # Mostrar fecha con icono
    textposition="top center",
    textfont_size=10,  # Tama√±o de fuente peque√±o para las fechas
    mode="markers+text",
    marker=dict(size=12, symbol="circle", color="#FF6347")  # Puntos m√°s grandes y coloridos
)

# Mejorar la presentaci√≥n del gr√°fico
fig.update_layout(
    xaxis_title="Mes y A√±o",
    yaxis_title="Actividad",
    xaxis=dict(
        tickformat="%b %Y",  # Mostrar solo mes y a√±o
        tickangle=45,  # Rotar las etiquetas de los meses
        dtick="M1"  # Mostrar un tick cada mes
    ),
    yaxis=dict(
        tickmode="array",  # Mostrar solo las actividades en el eje Y
        tickvals=orden_actividades,  # Definir el orden de las actividades
        ticktext=[f"{emoji_actividades.get(act, 'üîÑ')} {act}" for act in orden_actividades],  # Incluir los iconos en el eje Y
    ),
    margin=dict(l=40, r=40, t=80, b=80),  # M√°rgenes m√°s amplios
    height=600,  # Altura m√°s grande
    width=1200,  # Ancho m√°s grande para una mejor visualizaci√≥n
    title_font_size=24,  # Aumentar el tama√±o del t√≠tulo
    font=dict(size=12, family="Arial, sans-serif"),  # Usar una fuente m√°s legible
    plot_bgcolor="#F9F9F9"  # Fondo claro para el gr√°fico
)

# Mostrar el gr√°fico
st.plotly_chart(fig, use_container_width=True)

# Espacio entre el gr√°fico y otros elementos
st.markdown("<br>", unsafe_allow_html=True)
